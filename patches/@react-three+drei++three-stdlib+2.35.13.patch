diff --git a/node_modules/@react-three/drei/node_modules/three-stdlib/controls/OrbitControls.js b/node_modules/@react-three/drei/node_modules/three-stdlib/controls/OrbitControls.js
index 576ad6f..430f0c8 100644
--- a/node_modules/@react-three/drei/node_modules/three-stdlib/controls/OrbitControls.js
+++ b/node_modules/@react-three/drei/node_modules/three-stdlib/controls/OrbitControls.js
@@ -80,6 +80,8 @@ class OrbitControls extends EventDispatcher {
     __publicField(this, "target0");
     __publicField(this, "position0");
     __publicField(this, "zoom0");
+    __publicField(this, "minPanDistance");
+    __publicField(this, "zoomToConstant");
     // the target DOM element for key events
     __publicField(this, "_domElementKeyEvents", null);
     __publicField(this, "getPolarAngle");
@@ -109,6 +111,9 @@ class OrbitControls extends EventDispatcher {
     this.target0 = this.target.clone();
     this.position0 = this.object.position.clone();
     this.zoom0 = this.object.zoom;
+    this.minPanDistance = 0;
+    /** @type {null | import('three').Vector3} */
+    this.zoomToConstant = null;
     this.getPolarAngle = () => spherical.phi;
     this.getAzimuthalAngle = () => spherical.theta;
     this.setPolarAngle = (value) => {
@@ -178,7 +183,9 @@ class OrbitControls extends EventDispatcher {
       const lastPosition = new Vector3();
       const lastQuaternion = new Quaternion();
       const twoPI = 2 * Math.PI;
-      return function update() {
+      return function update(fixAngle) {
+        const fixedAzimuth = fixAngle === true ? scope.getAzimuthalAngle() : null;
+        const fixedPolar = fixAngle === true ? scope.getPolarAngle() : null;
         const position = scope.object.position;
         quat.setFromUnitVectors(object.up, up);
         quatInverse.copy(quat).invert();
@@ -195,8 +202,8 @@ class OrbitControls extends EventDispatcher {
           spherical.theta += sphericalDelta.theta;
           spherical.phi += sphericalDelta.phi;
         }
-        let min = scope.minAzimuthAngle;
-        let max = scope.maxAzimuthAngle;
+        let min = fixedAzimuth === null ? scope.minAzimuthAngle : fixedAzimuth;
+        let max = fixedAzimuth === null ? scope.maxAzimuthAngle : fixedAzimuth;
         if (isFinite(min) && isFinite(max)) {
           if (min < -Math.PI)
             min += twoPI;
@@ -212,7 +219,7 @@ class OrbitControls extends EventDispatcher {
             spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
           }
         }
-        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
+        spherical.phi = fixedPolar === null ? Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi)) : fixedPolar;
         spherical.makeSafe();
         if (scope.enableDamping === true) {
           scope.target.addScaledVector(panOffset, scope.dampingFactor);
@@ -245,6 +252,9 @@ class OrbitControls extends EventDispatcher {
             const prevRadius = offset.length();
             newRadius = clampDistance(prevRadius * scale);
             const radiusDelta = prevRadius - newRadius;
+            if (scope.zoomToConstant !== null) {
+              dollyDirection.copy(scope.zoomToConstant).sub(scope.object.position).normalize();
+            }
             scope.object.position.addScaledVector(dollyDirection, radiusDelta);
             scope.object.updateMatrixWorld();
           } else if (scope.object.isOrthographicCamera) {
@@ -377,6 +387,9 @@ class OrbitControls extends EventDispatcher {
       return function panLeft2(distance, objectMatrix) {
         v.setFromMatrixColumn(objectMatrix, 0);
         v.multiplyScalar(-distance);
+        if (Math.abs(distance) < scope.minPanDistance) {
+          return;
+        }
         panOffset.add(v);
       };
     })();
@@ -390,6 +403,9 @@ class OrbitControls extends EventDispatcher {
           v.crossVectors(scope.object.up, v);
         }
         v.multiplyScalar(distance);
+        if (Math.abs(distance) < scope.minPanDistance) {
+          return;
+        }
         panOffset.add(v);
       };
     })();
